"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _googleMapsInput = _interopRequireDefault(require("config:@sanity/google-maps-input"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _patchEvent = require("part:@sanity/form-builder/patch-event");

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var _changeIndicators = require("@sanity/base/lib/change-indicators");

var _GoogleMapsLoadProxy = require("../loader/GoogleMapsLoadProxy");

var _GeopointSelect = require("./GeopointSelect");

var _GeopointInput = _interopRequireDefault(require("./GeopointInput.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getStaticImageUrl = value => {
  var loc = "".concat(value.lat, ",").concat(value.lng);
  var params = {
    key: _googleMapsInput.default.apiKey,
    center: loc,
    markers: loc,
    zoom: 13,
    scale: 2,
    size: '640x300'
  };
  var qs = Object.keys(params).reduce((res, param) => {
    return res.concat("".concat(param, "=").concat(encodeURIComponent(params[param])));
  }, []);
  return "https://maps.googleapis.com/maps/api/staticmap?".concat(qs.join('&'));
};

class GeopointInput extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "editButton", void 0);

    _defineProperty(this, "setEditButton", el => {
      this.editButton = el;
    });

    _defineProperty(this, "handleFocus", event => {
      this.setState({
        hasFocus: true
      });
      this.props.onFocus(event);
    });

    _defineProperty(this, "handleBlur", () => {
      this.setState({
        hasFocus: false
      });
      this.props.onBlur();
    });

    _defineProperty(this, "handleToggleModal", () => {
      var _this$props = this.props,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur;
      this.setState(prevState => ({
        modalOpen: !prevState.modalOpen
      }), () => {
        if (this.state.modalOpen) {
          onFocus(['$']);
        } else {
          onBlur();
        }
      });
    });

    _defineProperty(this, "handleCloseModal", () => {
      this.setState({
        modalOpen: false
      });
    });

    _defineProperty(this, "handleChange", latLng => {
      var _this$props2 = this.props,
          type = _this$props2.type,
          onChange = _this$props2.onChange;
      onChange(_patchEvent.PatchEvent.from([(0, _patchEvent.setIfMissing)({
        _type: type.name
      }), (0, _patchEvent.set)(latLng.lat(), ['lat']), (0, _patchEvent.set)(latLng.lng(), ['lng'])]));
    });

    _defineProperty(this, "handleClear", () => {
      var onChange = this.props.onChange;
      onChange(_patchEvent.PatchEvent.from((0, _patchEvent.unset)()));
    });

    this.state = {
      modalOpen: false,
      hasFocus: false
    };
  }

  focus() {
    if (this.editButton) {
      this.editButton.focus();
    }
  }

  render() {
    var _this$props3 = this.props,
        value = _this$props3.value,
        compareValue = _this$props3.compareValue,
        readOnly = _this$props3.readOnly,
        type = _this$props3.type,
        markers = _this$props3.markers,
        level = _this$props3.level,
        presence = _this$props3.presence;
    var _this$state = this.state,
        modalOpen = _this$state.modalOpen,
        hasFocus = _this$state.hasFocus;

    if (!_googleMapsInput.default || !_googleMapsInput.default.apiKey) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, "The ", /*#__PURE__*/_react.default.createElement("a", {
        href: "https://sanity.io/docs/schema-types/geopoint-type"
      }, "Geopoint type"), " needs a Google Maps API key with access to:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, "Google Maps JavaScript API"), /*#__PURE__*/_react.default.createElement("li", null, "Google Places API Web Service"), /*#__PURE__*/_react.default.createElement("li", null, "Google Static Maps API")), /*#__PURE__*/_react.default.createElement("p", null, "Please enter the API key with access to these services in", /*#__PURE__*/_react.default.createElement("code", {
        style: {
          whiteSpace: 'nowrap'
        }
      }, "`<project-root>/config/@sanity/google-maps-input.json`")));
    }

    return /*#__PURE__*/_react.default.createElement(_default4.default, {
      level: level,
      legend: type.title,
      description: type.description,
      markers: markers,
      presence: presence,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      changeIndicator: false
    }, /*#__PURE__*/_react.default.createElement("div", null, value && /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorCompareValueProvider, {
      value: value,
      compareValue: compareValue
    }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, {
      className: (0, _classnames.default)(_GeopointInput.default.map, readOnly && _GeopointInput.default.readOnly, hasFocus && _GeopointInput.default.focused),
      compareDeep: true
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: _GeopointInput.default.previewImage,
      src: getStaticImageUrl(value),
      alt: "Map location"
    }))), !readOnly && /*#__PURE__*/_react.default.createElement("div", {
      className: _GeopointInput.default.functions
    }, /*#__PURE__*/_react.default.createElement(_buttonGrid.default, null, /*#__PURE__*/_react.default.createElement(_default2.default, {
      inverted: true,
      onClick: this.handleToggleModal,
      icon: value && _editIcon.default,
      ref: this.setEditButton
    }, value ? 'Edit' : 'Set location'), value && /*#__PURE__*/_react.default.createElement(_default2.default, {
      color: "danger",
      icon: _trashIcon.default,
      inverted: true,
      onClick: this.handleClear
    }, "Remove"))), modalOpen && /*#__PURE__*/_react.default.createElement(_default3.default, {
      title: "Place the marker on the map",
      onClose: this.handleCloseModal,
      onCloseClick: this.handleCloseModal,
      message: "Select location by dragging the marker or search for a place",
      isOpen: modalOpen,
      padding: "none",
      size: "large"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _GeopointInput.default.dialogInner
    }, /*#__PURE__*/_react.default.createElement(_GoogleMapsLoadProxy.GoogleMapsLoadProxy, null, api => /*#__PURE__*/_react.default.createElement(_GeopointSelect.GeopointSelect, {
      api: api,
      value: value,
      onChange: readOnly ? undefined : this.handleChange,
      defaultLocation: _googleMapsInput.default.defaultLocation,
      defaultZoom: _googleMapsInput.default.defaultZoom
    }))))));
  }

}

_defineProperty(GeopointInput, "defaultProps", {
  markers: []
});

var _default = GeopointInput;
exports.default = _default;