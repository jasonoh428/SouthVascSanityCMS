"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchInput = void 0;

var React = _interopRequireWildcard(require("react"));

var _SearchInput = _interopRequireDefault(require("./SearchInput.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SearchInput extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "searchInputRef", /*#__PURE__*/React.createRef());

    _defineProperty(this, "autoComplete", void 0);

    _defineProperty(this, "handleChange", () => {
      if (!this.autoComplete) {
        return;
      }

      this.props.onChange(this.autoComplete.getPlace());

      if (this.searchInputRef.current) {
        this.searchInputRef.current.value = '';
      }
    });
  }

  componentDidMount() {
    var input = this.searchInputRef.current;

    if (!input) {
      return;
    }

    var _this$props = this.props,
        api = _this$props.api,
        map = _this$props.map;
    var Circle = api.Circle,
        places = api.places,
        event = api.event;
    var searchBounds = new Circle({
      center: map.getCenter(),
      radius: 100
    }).getBounds();
    this.autoComplete = new places.Autocomplete(input, {
      bounds: searchBounds,
      types: [] // return all kinds of places

    });
    event.addListener(this.autoComplete, 'place_changed', this.handleChange);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: _SearchInput.default.wrapper
    }, /*#__PURE__*/React.createElement("input", {
      name: "place",
      ref: this.searchInputRef,
      placeholder: "Search for place or address",
      className: _SearchInput.default.input
    }));
  }

}

exports.SearchInput = SearchInput;